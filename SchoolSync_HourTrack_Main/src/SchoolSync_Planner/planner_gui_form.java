/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package SchoolSync_Planner;

import com.formdev.flatlaf.FlatDarkLaf;
import com.formdev.flatlaf.themes.FlatMacDarkLaf;
import com.toedter.calendar.JCalendar;
import com.toedter.calendar.JDateChooser;
import java.awt.Desktop;
import java.awt.GridLayout;
import java.awt.PopupMenu;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Paths;
import java.text.DateFormat;
import java.text.DateFormatSymbols;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Comparator;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonGroup;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollBar;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author James Knox
 */
public class planner_gui_form extends javax.swing.JFrame {

    /**
     * Creates new form planner_gui_form
     */
    
     private JCalendar plannercalendar;
    private DefaultComboBoxModel<String> nameComboBoxModel;
    private DefaultComboBoxModel<String> subjectComboBoxModel;
    
    public planner_gui_form() {
        initComponents();
        
        loadPlanData();
     
         try {
        UIManager.setLookAndFeel(new FlatDarkLaf());
    } catch (UnsupportedLookAndFeelException ex) {
        ex.printStackTrace();
    }
        
        

        // Create the ComboBox models
        nameComboBoxModel = new DefaultComboBoxModel<>();
        subjectComboBoxModel = new DefaultComboBoxModel<>();

        // Set the ComboBox models to the combo boxes
        student_planner_name.setModel(nameComboBoxModel);
        student_planner_subject.setModel(subjectComboBoxModel);

        // Load data into the combo boxes
        loadDataIntoComboBoxes();
        
    
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jDesktopPane1 = new javax.swing.JDesktopPane();
        plannercalender = new javax.swing.JPanel();
        jDesktopPane2 = new javax.swing.JDesktopPane();
        jLabel4 = new javax.swing.JLabel();
        student_planner_name = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        add_entry = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        plan_text_planner = new javax.swing.JTextPane();
        student_planner_subject = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jScrollPaneplanner = new javax.swing.JScrollPane();
        jToolBar1 = new javax.swing.JToolBar();
        savePlannerToCSV = new javax.swing.JButton();
        export_planner_toCSV = new javax.swing.JButton();
        planjScrollPane = new javax.swing.JScrollPane();
        planmodel = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        clear_planner = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("SchoolSync Planner v0.5.8.5");

        jLabel2.setFont(jLabel2.getFont().deriveFont((jLabel2.getFont().getStyle() | java.awt.Font.ITALIC), jLabel2.getFont().getSize()+6));
        jLabel2.setText("Planner");

        jDesktopPane1.setBackground(new java.awt.Color(51, 51, 51));
        jDesktopPane1.setDoubleBuffered(true);

        plannercalender.setBackground(new java.awt.Color(51, 51, 51));

        javax.swing.GroupLayout plannercalenderLayout = new javax.swing.GroupLayout(plannercalender);
        plannercalender.setLayout(plannercalenderLayout);
        plannercalenderLayout.setHorizontalGroup(
            plannercalenderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 634, Short.MAX_VALUE)
        );
        plannercalenderLayout.setVerticalGroup(
            plannercalenderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 386, Short.MAX_VALUE)
        );

        // Create and initialize the JCalendar component
        plannercalendar = new JCalendar();

        // Set the size and position of the JCalendar component
        plannercalendar.setBounds(10, 10, 600, 400);

        // Add the JCalendar component to the plannercalender JPanel
        plannercalender.add(plannercalendar);

        jDesktopPane2.setBackground(new java.awt.Color(51, 51, 51));

        jLabel4.setText("Planner Area");

        student_planner_name.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        student_planner_name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                student_planner_nameActionPerformed(evt);
            }
        });

        jLabel1.setText("Student");

        add_entry.setBackground(new java.awt.Color(80, 164, 171));
        add_entry.setForeground(new java.awt.Color(0, 0, 0));
        add_entry.setText("Add Entry");
        add_entry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add_entryActionPerformed(evt);
            }
        });

        plan_text_planner.setText("TODO://");
        jScrollPane1.setViewportView(plan_text_planner);

        student_planner_subject.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel3.setText("Subject");

        jDesktopPane2.setLayer(jLabel4, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(student_planner_name, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(add_entry, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(student_planner_subject, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(jLabel3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jDesktopPane2Layout = new javax.swing.GroupLayout(jDesktopPane2);
        jDesktopPane2.setLayout(jDesktopPane2Layout);
        jDesktopPane2Layout.setHorizontalGroup(
            jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(add_entry, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addGroup(jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jDesktopPane2Layout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(student_planner_name, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jDesktopPane2Layout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(student_planner_subject, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        jDesktopPane2Layout.setVerticalGroup(
            jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(student_planner_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(14, 14, 14)
                .addGroup(jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(student_planner_subject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addGap(3, 3, 3)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(add_entry)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jDesktopPane1.setLayer(plannercalender, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jDesktopPane2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addComponent(plannercalender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jDesktopPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(plannercalender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jDesktopPane2))
                .addContainerGap())
        );

        JCalendar plannercalendar = new JCalendar();

        plannercalendar = new JCalendar();

        // Add the JCalendar component to the JPanel or container
        plannercalender.add(plannercalendar);

        jScrollPaneplanner.setViewportView(null);

        jToolBar1.setFloatable(true);
        jToolBar1.setRollover(true);
        jToolBar1.setPreferredSize(new java.awt.Dimension(200, 25));

        savePlannerToCSV.setBackground(new java.awt.Color(0, 102, 51));
        savePlannerToCSV.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        savePlannerToCSV.setForeground(new java.awt.Color(255, 255, 255));
        savePlannerToCSV.setText("Export To Print (By Date Range)");
        savePlannerToCSV.setMaximumSize(new java.awt.Dimension(200, 24));
        savePlannerToCSV.setMinimumSize(new java.awt.Dimension(200, 24));
        savePlannerToCSV.setPreferredSize(new java.awt.Dimension(200, 24));
        savePlannerToCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savePlannerToCSVActionPerformed(evt);
            }
        });
        jToolBar1.add(savePlannerToCSV);

        export_planner_toCSV.setBackground(new java.awt.Color(0, 102, 51));
        export_planner_toCSV.setForeground(new java.awt.Color(255, 255, 255));
        export_planner_toCSV.setText("Export Planner To SpreadSheet");
        export_planner_toCSV.setEnabled(false);
        export_planner_toCSV.setMaximumSize(new java.awt.Dimension(200, 24));
        export_planner_toCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                export_planner_toCSVActionPerformed(evt);
            }
        });
        jToolBar1.add(export_planner_toCSV);

        planmodel.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Student", "Subject", "Date", "Plan"
            }
        ));
        planjScrollPane.setViewportView(planmodel);

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        clear_planner.setText("Clear Storage");
        clear_planner.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clear_plannerActionPerformed(evt);
            }
        });
        jMenu2.add(clear_planner);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(planjScrollPane)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 417, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jDesktopPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jDesktopPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(planjScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void add_entryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_entryActionPerformed
        // TODO add your handling code here:
        
           saveEntryToCSV();
} 
    
    private void loadPlanData() {
        String csvFile = Paths.get(System.getProperty("user.home"), "SSstartup", "plannerdata.csv").toString();


        try (BufferedReader reader = new BufferedReader(new FileReader(csvFile))) {
            DefaultTableModel model = (DefaultTableModel) planmodel.getModel();
            String line;

            while ((line = reader.readLine()) != null) {
                String[] data = line.split(",");
                model.addRow(data);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        
        
        
        
        
    }

    // Other methods and code...

    // Method to add a new entry and display it at the top


private void loadDataIntoComboBoxes() {
     // Get the user's home directory
    String userHomeDirectory = System.getProperty("user.home");

    // Specify the CSV file path and name in the user's home directory
    String filePath = userHomeDirectory + File.separator + "SSstartup" + File.separator + "CBData.csv";

    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
        DefaultComboBoxModel<String> studentModel = new DefaultComboBoxModel<>();
        DefaultComboBoxModel<String> subjectModel = new DefaultComboBoxModel<>();

        String line;
        while ((line = br.readLine()) != null) {
            line = line.trim(); // Trim leading and trailing spaces

            // Ignore empty lines
            if (line.isEmpty()) {
                continue;
            }

            String[] data = line.split(",");
            if (data.length == 1) {
                String student = data[0];

                // Ignore null or empty student names
                if (student != null && !student.isEmpty()) {
                    studentModel.addElement(student);
                }
            } else if (data.length >= 2) {
                String student = data[0];
                String subject = data[1];

                // Ignore null or empty student names and subjects
                if (student != null && !student.isEmpty()) {
                    studentModel.addElement(student);
                }

                if (subject != null && !subject.isEmpty()) {
                    subjectModel.addElement(subject);
                }
            }
        }

        student_planner_name.setModel(studentModel);
        student_planner_subject.setModel(subjectModel);
    } catch (IOException e) {
        JOptionPane.showMessageDialog(this, "Error loading data from CSV.");
        e.printStackTrace();
    }

}

private void saveEntryToCSV() {
    String name = student_planner_name.getSelectedItem().toString();
    String subject = student_planner_subject.getSelectedItem().toString();
    String date = formatDate(plannercalendar.getDate());
    String planText = plan_text_planner.getText();
    String csvFile = Paths.get(System.getProperty("user.home"), "SSstartup", "plannerdata.csv").toString();


    try (FileWriter writer = new FileWriter(csvFile, true)) {
        writer.append(name);
        writer.append(",");
        writer.append(subject);
        writer.append(",");
        writer.append(date);
        writer.append(",");
        writer.append(planText);
        writer.append("\n");
        
        // Add the data to the JTable
        DefaultTableModel model = (DefaultTableModel) planmodel.getModel();
        Object[] rowData = {name, subject, date, planText};
        model.insertRow(0, rowData);
    
    } catch (IOException e) {
        e.printStackTrace();
    } 
}


private String formatDate(Date date) {
    DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
    return dateFormat.format(date);
    }//GEN-LAST:event_add_entryActionPerformed

    private void savePlannerToCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savePlannerToCSVActionPerformed
    
         // Prompt the user to select the save option
    String[] options = {"Save All Students", "Save Individual Students"};
    int saveOption = JOptionPane.showOptionDialog(null, "Choose save option", "Save Planner", JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null, options, options[0]);

    if (saveOption == 0) {
        // Save all students
        savePlannerToCSV(null); // Pass null to save all students
    } else if (saveOption == 1) {
        // Save individual students
        showStudentSelectionDialog();
    }
}
        
        private void savePlannerToCSV(List<String> selectedStudents) {
    JDateChooser fromDateChooser = new JDateChooser();
    JDateChooser toDateChooser = new JDateChooser();
    JLabel fromDateLabel = new JLabel("From Date:");
    JLabel toDateLabel = new JLabel("To Date:");
    JPanel panel = new JPanel();
    panel.setLayout(new GridLayout(2, 2));
    panel.add(fromDateLabel);
    panel.add(fromDateChooser);
    panel.add(toDateLabel);
    panel.add(toDateChooser);

    int result = JOptionPane.showConfirmDialog(null, panel, "Select Date Range", JOptionPane.OK_CANCEL_OPTION);

    if (result == JOptionPane.OK_OPTION) {
        Date fromDate = fromDateChooser.getDate();
        Date toDate = toDateChooser.getDate();

        
        
        // Validate the selected date range
        if (fromDate != null && toDate != null && fromDate.before(toDate)) {
            String csvFile = Paths.get(System.getProperty("user.home"), "SSstartup", "plannerdata.csv").toString();


            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setFileFilter(new FileNameExtensionFilter("HTML Files", "html")); // Add file filter for HTML files

            fileChooser.setDialogTitle("Save Planner Export");
            fileChooser.setSelectedFile(new File("planner_export.html"));

            int userSelection = fileChooser.showSaveDialog(null);

            if (userSelection == JFileChooser.APPROVE_OPTION) {
                File outputFile = fileChooser.getSelectedFile();
                // Append the .html extension if it's not already present
    String outputPath = outputFile.getAbsolutePath();
    if (!outputPath.toLowerCase().endsWith(".html")) {
        outputFile = new File(outputPath + ".html");
    }

    try (BufferedReader reader = new BufferedReader(new FileReader(csvFile));
         BufferedWriter writer = new BufferedWriter(new FileWriter(outputFile))) {

    writer.write("<html><head>");
    writer.write("<style>");
    writer.write("body {font-family: Arial, sans-serif;}");
    writer.write("header {background-color: #a3c6b3; padding: 10px;}");
    writer.write("h1 {margin: 0;}");
    writer.write("table {border-collapse: collapse; width: 100%;}");
    writer.write("th, td {border: 2px solid black; padding: 8px;}");
    writer.write("th {background-color: #f2f2f2;}");
    writer.write(".top-bar {padding: 10px; background-color: #f2f2f2;}");
    writer.write(".print-button {display: block; margin-bottom: 10px; background-color: #4CAF50; color: white; border: none; padding: 10px 20px; text-align: center; text-decoration: none; display: inline-block; font-size: 16px; cursor: pointer;}"); // Display the green print button
    writer.write(".export-pdf-button {display: none;}"); // Hide the export to PDF button when printing
    writer.write(".section {border: 2px solid #ccc; padding: 10px; margin-bottom: 20px;}");
    writer.write(".section-row {display: flex;}");
    writer.write(".section-column {width: 50%;}");
    writer.write(".week-group {margin-bottom: 40px;}");
    writer.write("@media print {"); // Styles for printing
    writer.write("  body {margin: 0;}");
    writer.write("  .top-bar {display: none;}"); // Hide the top bar when printing
    writer.write("  .section-row {display: block; page-break-inside: avoid;}");
    writer.write("  .section-column {width: 100%;}");
    writer.write("  h2 {page-break-after: avoid;}");
    writer.write("  h3 {page-break-after: avoid;}");
    writer.write("  table {page-break-inside: avoid;}");
    writer.write("  .print-button {display: none;}"); // Hide the print button in the printed version
    writer.write("  .export-pdf-button {display: none;}"); // Hide the export to PDF button in the printed version
    writer.write("}");
    writer.write("</style>");
    writer.write("</head><body>");

    // Add the top bar and print button
    writer.write("<div class='top-bar'>");
    writer.write("<h1>SchoolSync Planner</h1>");
    writer.write("<button class='print-button' onclick='window.print()'>Print</button>");

    // Add the export to PDF button
    writer.write("<button class='export-pdf-button' onclick='exportToPDF()'>Export to PDF</button>");

    writer.write("</div>");

    // Add the JavaScript function for exporting to PDF
    writer.write("<script>");
    writer.write("function exportToPDF() {");
    writer.write("  window.print();"); // Print the page
    writer.write("}");
    writer.write("</script>");

                   // Read the file line by line

// Read the file line by line and store sections in a TreeMap
                    String line;
                    TreeMap<Date, List<String[]>> sectionsMap = new TreeMap<>();

                    while ((line = reader.readLine()) != null) {
                        String[] data = line.split(",");

                        // Check if the data array has the required number of elements
                        if (data.length < 4) {
                            continue; // Skip the line if it doesn't have enough elements
                        }

                        // Get the date value and parse it
                        String dateString = data[2];
                        DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
                        Date entryDate;
                        try {
                            entryDate = dateFormat.parse(dateString);
                        } catch (ParseException e) {
                            // Skip the line if the date cannot be parsed
                            continue;
                        }

                        // Check if the entry date is within the selected date range
                        if (entryDate.after(fromDate) && entryDate.before(toDate)) {
                            // Check if all students should be saved or if the student is selected
                            if (selectedStudents == null || selectedStudents.contains(data[0])) {
                                // Store the section in the TreeMap based on the date
                                List<String[]> sectionsList = sectionsMap.getOrDefault(entryDate, new ArrayList<>());
                                sectionsList.add(data);
                                sectionsMap.put(entryDate, sectionsList);
                            }
                        }
                    }

// Write the sections in chronological order
// Write the sections in chronological order
int sectionCount = 0;
int weekCount = 1;
writer.write("<div class='section-row'>");

for (Map.Entry<Date, List<String[]>> entry : sectionsMap.entrySet()) {
    Date date = entry.getKey();
    List<String[]> sectionsList = entry.getValue();

    // Sort the sections list by student name
    sectionsList.sort(Comparator.comparing(data -> data[0]));

    // Write the day section if it's a new day
    if (sectionCount % 4 == 0) {
        if (sectionCount > 0) {
            // Close the previous row if it's not the first row
            writer.write("</div>");
        }
        writer.write("<div class='section-row'>"); // Start a new row
        writer.write("<div class='section-column'>"); // Start the first column
        writer.write("<h2>Week " + weekCount + " of " + getMonthName(date) + "</h2>");
        writer.write("</div>");
        writer.write("<div class='section-column'>"); // Start the second column
    } else {
        writer.write("<div class='section-column'>"); // Start a new column
    }

    DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
    writer.write("<h3>" + dateFormat.format(date) + "</h3>");
    writer.write("<table>");
    writer.write("<tr><th>Student</th><th>Subject</th><th>Plan</th></tr>");

    // Write the table rows
    for (String[] data : sectionsList) {
        writer.write("<tr>");
        writer.write("<td>" + data[0] + "</td>");
        writer.write("<td>" + data[1] + "</td>");
        writer.write("<td>" + data[3] + "</td>");
        // Add checkbox at the end of the row
        writer.write("<td><input type='checkbox'></td>");
        writer.write("</tr>");
    }

    writer.write("</table>");
    writer.write("</div>");

    sectionCount++;

    // Check if the week has ended (reached 4 sections)
    if (sectionCount % 4 == 0) {
        writer.write("</div>"); // Close the current row
        weekCount++;
    }
}

// Close the last row if it's not a complete row
if (sectionCount % 4 != 0) {
    writer.write("</div>");
}


// Close the body and html tags
writer.write("</body></html>");

 JOptionPane.showMessageDialog(null, "Planner exported successfully.\nFile saved at: " + outputFile.getAbsolutePath());

    // Open the exported HTML file
    if (Desktop.isDesktopSupported()) {
        Desktop.getDesktop().open(outputFile);
    }
} catch (IOException e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(null, "Error exporting planner.");
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Invalid date range.");
        }
    }
}

private void showStudentSelectionDialog() {
    String csvFile = Paths.get(System.getProperty("user.home"), "SSstartup", "plannerdata.csv").toString();


    // Read the student names from the CSV file
    Set<String> studentNames = new HashSet<>();
    try (BufferedReader reader = new BufferedReader(new FileReader(csvFile))) {
        String line;
        while ((line = reader.readLine()) != null) {
            String[] data = line.split(",");
            if (data.length >= 4) {
                studentNames.add(data[0]);
            }
        }
    } catch (IOException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error reading student names.");
        return;
    }

    // Create the dialog components
    JCheckBox[] checkBoxes = new JCheckBox[studentNames.size()];
    int index = 0;
    for (String name : studentNames) {
        checkBoxes[index] = new JCheckBox(name);
        index++;
    }

    JPanel panel = new JPanel(new GridLayout(0, 1));
    for (JCheckBox checkBox : checkBoxes) {
        panel.add(checkBox);
    }

    int result = JOptionPane.showConfirmDialog(null, panel, "Select Students", JOptionPane.OK_CANCEL_OPTION);
    if (result == JOptionPane.OK_OPTION) {
        // Get the selected students
        List<String> selectedStudents = new ArrayList<>();
        for (JCheckBox checkBox : checkBoxes) {
            if (checkBox.isSelected()) {
                selectedStudents.add(checkBox.getText());
            }
        }

        // Save the selected students' planner
        savePlannerToCSV(selectedStudents);
    }

        
        
    }
    
    
private String getMonthName(Date date) {
    Calendar calendar = Calendar.getInstance();
    calendar.setTime(date);
    int month = calendar.get(Calendar.MONTH);
    DateFormatSymbols dfs = new DateFormatSymbols();
    String[] months = dfs.getMonths();
    return months[month];



    }//GEN-LAST:event_savePlannerToCSVActionPerformed

    private void clear_plannerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clear_plannerActionPerformed
        // TODO add your handling code here:
        // Reset UI elements
    student_planner_name.setSelectedIndex(0);
    student_planner_subject.setSelectedIndex(0);
    plannercalendar.setDate(new Date());
    plan_text_planner.setText("");

    // Delete the file
    String csvFile = Paths.get(System.getProperty("user.home"), "SSstartup", "plannerdata.csv").toString();

    File fileToDelete = new File(csvFile);
    if (fileToDelete.exists()) {
        if (fileToDelete.delete()) {
            System.out.println("File deleted successfully.");
        } else {
            System.out.println("Failed to delete the file.");
        }
    } else {
        System.out.println("File does not exist.");
    }

    }//GEN-LAST:event_clear_plannerActionPerformed

    private void export_planner_toCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_export_planner_toCSVActionPerformed
        // TODO add your handling code here:
        
JRadioButton allStudentsRadioButton = new JRadioButton("Export All Students");
    JRadioButton selectedStudentsRadioButton = new JRadioButton("Export Selected Students");
    ButtonGroup radioButtonGroup = new ButtonGroup();
    radioButtonGroup.add(allStudentsRadioButton);
    radioButtonGroup.add(selectedStudentsRadioButton);
    JPanel radioPanel = new JPanel();
    radioPanel.setLayout(new GridLayout(2, 1));
    radioPanel.add(allStudentsRadioButton);
    radioPanel.add(selectedStudentsRadioButton);

    JDateChooser fromDateChooser = new JDateChooser();
    JDateChooser toDateChooser = new JDateChooser();
    JLabel fromDateLabel = new JLabel("From Date:");
    JLabel toDateLabel = new JLabel("To Date:");
    JPanel panel = new JPanel();
    panel.setLayout(new GridLayout(3, 2));
    panel.add(allStudentsRadioButton);
    panel.add(selectedStudentsRadioButton);
    panel.add(fromDateLabel);
    panel.add(fromDateChooser);
    panel.add(toDateLabel);
    panel.add(toDateChooser);

    int result = JOptionPane.showConfirmDialog(null, panel, "Select Export Options and Date Range", JOptionPane.OK_CANCEL_OPTION);

    if (result == JOptionPane.OK_OPTION) {
        Date fromDate = fromDateChooser.getDate();
        Date toDate = toDateChooser.getDate();

        // Validate the selected date range
        if (fromDate != null && toDate != null && fromDate.before(toDate)) {
            String csvFile = Paths.get(System.getProperty("user.home"), "SSstartup", "plannerdata.csv").toString();


            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setDialogTitle("Save Planner Export");
            fileChooser.setSelectedFile(new File("planner_export.csv"));

            int userSelection = fileChooser.showSaveDialog(null);

            if (userSelection == JFileChooser.APPROVE_OPTION) {
                File outputFile = fileChooser.getSelectedFile();

                try (BufferedReader reader = new BufferedReader(new FileReader(csvFile));
                     BufferedWriter writer = new BufferedWriter(new FileWriter(outputFile))) {

                    // Write the CSV file headers
                    writer.write("Student,Subject,Date,Plan\n");

                    // Read the file line by line
                    String line;
                    String previousDate = null;
                    while ((line = reader.readLine()) != null) {
                        String[] data = line.split(",");

                        // Check if the data array has the required number of elements
                        if (data.length < 4) {
                            continue; // Skip the line if it doesn't have enough elements
                        }

                        // Get the date value and parse it
                        String dateString = data[2];
                        DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
                        Date entryDate;
                        try {
                            entryDate = dateFormat.parse(dateString);
                        } catch (ParseException e) {
                            // Skip the line if the date cannot be parsed
                            continue;
                        }

                        // Check if the entry date is within the selected date range
                        boolean isDateInRange = entryDate.after(fromDate) && entryDate.before(toDate);

                        // Check the export option selected
                        boolean exportAllStudents = allStudentsRadioButton.isSelected();
                        boolean exportSelectedStudents = selectedStudentsRadioButton.isSelected();

                        // Export based on selected options
                        if ((exportAllStudents && isDateInRange) || (exportSelectedStudents && isDateInRange && isSelected(data[0]))) {
                            // Write the CSV row
                            writer.write(data[0] + "," + data[1] + "," + data[2] + "," + data[3] + "\n");
                        }
                    }

                    JOptionPane.showMessageDialog(null, "Planner exported successfully.\nFile saved at: " + outputFile.getAbsolutePath());
                } catch (IOException e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(null, "Error exporting planner.");
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Invalid date range.");
        }
    }
}

private boolean isSelected(String studentName) {
    // TODO: Implement your logic to check if the student is selected
    // You can replace this method with your own logic to determine if a student is selected
    return false;


        
        
    }//GEN-LAST:event_export_planner_toCSVActionPerformed

    private void student_planner_nameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_student_planner_nameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_student_planner_nameActionPerformed

    
    /**
     * @param args the command line arguments
     *
     *
     *
     *
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            UIManager.setLookAndFeel(new FlatMacDarkLaf());
        } catch (Exception e) {
            e.printStackTrace();
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new planner_gui_form().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add_entry;
    private javax.swing.JMenuItem clear_planner;
    private javax.swing.JButton export_planner_toCSV;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JDesktopPane jDesktopPane2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPaneplanner;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JTextPane plan_text_planner;
    private javax.swing.JScrollPane planjScrollPane;
    private javax.swing.JTable planmodel;
    private javax.swing.JPanel plannercalender;
    private javax.swing.JButton savePlannerToCSV;
    private javax.swing.JComboBox<String> student_planner_name;
    private javax.swing.JComboBox<String> student_planner_subject;
    // End of variables declaration//GEN-END:variables
}
